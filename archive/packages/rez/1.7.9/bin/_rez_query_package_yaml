#!/usr/bin/python
#
# An internal utility script for querying package.yaml files
#

import sys
import yaml
import getopt
from rez_metafile import *

try:
	opts, pkgstrs = getopt.getopt(sys.argv[1:], '', \
		["filepath=", "print-version", "print-name", "print-requires", "print-build-requires", \
		"print-desc", "print-help", "print-tools", "print-variant=", "quiet", "no-catch"])
except getopt.GetoptError, e:
	sys.stderr.write(str(e)+'\n')
	sys.exit(1)

filepath="./package.yaml"
variant_num = None
print_version = ("--print-version", "") in opts
print_name = ("--print-name", "") in opts
print_desc = ("--print-desc", "") in opts
print_requires = ("--print-requires", "") in opts
print_build_requires = ("--print-build-requires", "") in opts
print_help = ("--print-help", "") in opts
print_tools = ("--print-tools", "") in opts
quiet = ("--quiet", "") in opts
no_catch = ("--no-catch", "") in opts

for o, a in opts:
	if (o == "--print-variant"):
		try:
			variant_num = int(a)
			if (variant_num < 0):
				raise ValueError
		except ValueError:
			if not quiet:
				sys.stderr.write("illegal variant number '" + a + "'\n")
			sys.exit(1)
	elif (o == "--filepath"):
		filepath=a


# load yaml
if no_catch:
	metadata = ConfigMetadata(filepath)
else:
	try:
		metadata = ConfigMetadata(filepath)
	except Exception as e:
		if not quiet:
			sys.stderr.write("Malformed package.yaml: '" + filepath + "'.\n")
			print >> sys.stderr, str(e)
		sys.exit(1)

if print_version:
	if metadata.version:
		print str(metadata.version)
	else:
		if not quiet:
			sys.stderr.write("No 'version' in " + filepath + ".\n")
		sys.exit(1)

if print_desc:
	if metadata.description:
		print str(metadata.description)

if print_name:
	if metadata.name:
		bad_chars = [ '-', '.' ]
		for ch in bad_chars:
			if (metadata.name.find(ch) != -1):
				sys.stderr.write("Package name '" + metadata.name + "' contains illegal character '" + ch + "'.\n")
				sys.exit(1)
		print str(metadata.name)
	else:
		if not quiet:
			sys.stderr.write("No 'name' in " + filepath + ".\n")
		sys.exit(1)

if print_build_requires:
	build_requires = metadata.get_build_requires()
	if build_requires:
		strs = str(' ').join(build_requires)
		print strs

if print_requires:
	requires = metadata.get_requires()
	if requires:
		strs = str(' ').join(requires)
		print strs

if print_help:
	if metadata.help:
		print str(metadata.help)
	else:
		if not quiet:
			sys.stderr.write("No 'help' entry specified in " + filepath + ".\n")
		sys.exit(1)

if print_tools:
	tools = metadata.metadict.get("tools")
	if tools:
		print str(' ').join(tools)

if (variant_num != None):
	variants = metadata.get_variants()
	if variants:
		if (variant_num >= len(variants)):
			if not quiet:
				sys.stderr.write("Variant #" + str(variant_num) + " does not exist in package.\n")
			sys.exit(1)
		else:
			strs = str(' ').join(variants[variant_num])
			print strs
	else:
		if not quiet:
			sys.stderr.write("Variant #" + str(variant_num) + " does not exist in package.\n")
		sys.exit(1)









#    Copyright 2008-2012 Dr D Studios Pty Limited (ACN 127 184 954) (Dr. D Studios)
#
#    This file is part of Rez.
#
#    Rez is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Rez is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with Rez.  If not, see <http://www.gnu.org/licenses/>.
